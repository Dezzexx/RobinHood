//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/MenuAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuAction"",
    ""maps"": [
        {
            ""name"": ""UIAction"",
            ""id"": ""560f542a-394c-4ed5-a3cf-e44d00db8a06"",
            ""actions"": [
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""12b30698-8c1b-4e47-a788-98ab064b0987"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa0a5ce6-75d3-4164-89cb-85ee49ff500e"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Android RB"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Android RB"",
            ""bindingGroup"": ""Android RB"",
            ""devices"": []
        }
    ]
}");
        // UIAction
        m_UIAction = asset.FindActionMap("UIAction", throwIfNotFound: true);
        m_UIAction_Start = m_UIAction.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UIAction
    private readonly InputActionMap m_UIAction;
    private IUIActionActions m_UIActionActionsCallbackInterface;
    private readonly InputAction m_UIAction_Start;
    public struct UIActionActions
    {
        private @MenuAction m_Wrapper;
        public UIActionActions(@MenuAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Start => m_Wrapper.m_UIAction_Start;
        public InputActionMap Get() { return m_Wrapper.m_UIAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActionActions set) { return set.Get(); }
        public void SetCallbacks(IUIActionActions instance)
        {
            if (m_Wrapper.m_UIActionActionsCallbackInterface != null)
            {
                @Start.started -= m_Wrapper.m_UIActionActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_UIActionActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_UIActionActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_UIActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public UIActionActions @UIAction => new UIActionActions(this);
    private int m_AndroidRBSchemeIndex = -1;
    public InputControlScheme AndroidRBScheme
    {
        get
        {
            if (m_AndroidRBSchemeIndex == -1) m_AndroidRBSchemeIndex = asset.FindControlSchemeIndex("Android RB");
            return asset.controlSchemes[m_AndroidRBSchemeIndex];
        }
    }
    public interface IUIActionActions
    {
        void OnStart(InputAction.CallbackContext context);
    }
}
